#pragma once
#include <tgmath.h>
#include <map>
#include <string>
#include <inttypes.h>
#include <cstring>
#include "zlib.h"
#include <Windows.h>

//TODO for me: when a new game is added make sure to update get game flags !!

#define VERSION "2.5.4"

#define TTARCH_BUFZ 0x10000
#define _LIBTT_EXPORT extern "C" __declspec(dllexport)
#define ENDSWITH(str,ending) !(std::string(str).compare(strlen(str) - strlen(ending), strlen(ending), ending))
#define BIT_SET(num,index) (((num) & (1 << index)) >> index) & 1
#define BIT_ORED(num,bitcheck) ((num & bitcheck) >> (int)log2(bitcheck)) & 1
#define PAD_REM(num,padn) pad(num,padn) - num
#define UNSET_BIT_INDEX(num,bit) num = num & ~(1<<bit)
#define DEL(v) delete v; v = NULL;
#define UNSET_BIT(num,bit) num &= ~(bit)
#define LOOPQ(i,count) for(int i = 0; i < count; i++)
#define DEL_VECTOR(e) LOOPQ(idx, e->size()) { delete (*e)[idx]; } e->clear();
#define DEL_VECTOR2(e,_T, _freefunc) for(_T v : *(e)){ _freefunc(v); delete v;} e->clear();
#define VECTOR_REMOVE(v, entry) v.erase(std::remove(v.begin(), v.end(), entry), v.end());
#define INTDEF constexpr uint32
#define WRITESB(strm, i) strm->write_int(32,strlen(i) + 8); strm->write_int(32,strlen(i)); strm->write((uint8*)i, strlen(i));
#define WRITES(strm, i) strm->write_int(32,strlen(i)); strm->write((uint8*)i, strlen(i));
//Definitions to quickly code the read from telltales files
#define GETS ctx->GetCurrentStream()
#define SETV(k,v) out->k = v
#define NEXTI stream->read_int(32)
#define NEXTL stream->read_int(64)
#define NEXTS stream->read_int(18)
#define NEXTC stream->read_int(8)
#define NEXTB stream->read_int(8) - 0x30
#define SSTR ctx->SkipString()
#define BADCRC(type) !_stricmp(type, "unknown_t")
#define NEXTS ctx->ReadString()

#define DLL_REFERENCE_IDS

constexpr auto OODLE_REF = "oodle";

#undef DLL_REFERENCE_IDS

#define DLL_DEFAULTS

constexpr auto OODLE_DEFAULT = "oo2core_8_win64.dll";

#undef DLL_DEFAULTS

typedef int8_t int8;
typedef int16_t int16;
typedef int32_t int32;
typedef int64_t int64;
typedef uint8_t uint8;
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef uint64_t uint64;
typedef uint8 endian;

#define KEY_COUNT 65

typedef struct {
	const char* game_id;
	const char* game_key;
} key;

//If your unsure on the game IDs actual game name, it should be at the end of the key >>
const key KEYS[KEY_COUNT] = {
	{ "sammaxremaster", "\x92\xCA\x9A\x81\x85\xE4\x64\x73\xA2\xBF\xD6\xD1\x7F\xC6\xCB\x88\x99\x5A\x80\xD8\xAA\xC2\x97\xE7\x96\x51\x9F\xA8\x9A\xD9\xAE\x95\xD7\x76\x62\x7F\xB4\xC4\xA6\xB9\xD6\xEC\xA9\x9C\x67\x85\xB3\xDC\x92\xC4\x9E\x64\xA0\xA2\x92"},
	{ "twd1","\x96\xca\x99\x9f\x8d\xda\x9a\x87\xd7\xcd\xd9\x95\x62\x95\xaa\xb8\xd5\x95\x96\xe5\xa4\xb9\x9b\xd0\xc9\x52\x9f\x85\x90\xcd\xcd\x9f\xc8\xb3\x99\x93\xc6\xc4\x9d\x9d\xa5\xa4\xcf\xcd\xa3\x9d\xbb\xdd\xac\xa7\x8b\x94\xd4\xa3\x6f" },//Walking Dead new day, not for the series! this is an old one
	{ "michonne","\x96\xca\x99\x9f\x8d\xda\x9a\x87\xd7\xcd\xd9\xb1\x63\x95\x83\xae\xca\x96\x98\xe0\xab\xdc\x7a\xd4\xc6\x85\xbc\x86\x69\x9c\xb8\x95\xcb\xb0\x9b\xbd\xc8\xa7\x9e\xcd\xd9\xc1\xa9\x9c\x67\x89\xb3\xdb\xb0\xcc\x94\x9a\xb4\xd7\xa0" },
	{ "thrones","\x86\xCA\x9A\x99\x73\xD2\x87\xAB\xE4\xDB\xE3\xC9\xA5\x96\x83\x87\xB0\x8B\x9A\xDC\x8C\xDB\x8A\xD7\xD7\x90\xDD\xBA\xAC\x9D\x91\x64\xA6\xA6\x9F\xB4\xB0\xC9\x8D\xD4\xE7\xE3\xE6\xD1\xAA\x63\x82\x9F\x8C\xC4\x93\x98\xBF\xD8\x93" },
	{ "hector101","\x87\xCE\x90\xA8\x93\xDE\x64\x73\xA3\xB4\xDA\xC7\xA6\xD4\xC5\x88\x99\x5B\x75\xDC\xA0\xE9\xA5\xE1\x96\x51\xA0\x9D\x9E\xCF\xD5\xA3\xD1\x76\x62\x80\xA9\xC8\x9C\xE0\xE4\xE6\xA9\x9C\x68\x7A\xB7\xD2\xB9\xD2\x98\x64\xA0\xA3\x87" },
	{ "hector102","\x87\xCE\x90\xA8\x93\xDE\x64\x73\xA4\xB4\xDA\xC7\xA6\xD4\xC5\x88\x99\x01\x75\xDC\xA0\xE9\xA5\xE1\x96\x51\xA1\x9D\x9E\xCF\xD5\xA3\xD1\x76\x62\x81\xA9\xC8\x9C\xE0\xE4\xE6\xA9\x9C\x69\x7A\xB7\xD2\xB9\xD2\x98\x64\xA0\xA4\x87" },
	{ "hector103","\x87\xCE\x90\xA8\x93\xDE\x64\x73\xA5\xB4\xDA\xC7\xA6\xD4\xC5\x88\x99\x5D\x75\xDC\xA0\xE9\xA5\xE1\x96\x51\xA2\x9D\x9E\xCF\xD5\xA3\xD1\x76\x62\x82\xA9\xC8\x9C\xE0\xE4\xE6\xA9\x9C\x6A\x7A\xB7\xD2\xB9\xD2\x98\x64\xA0\xA5\x87" },
	{ "marvel","\x86\xDE\x8E\xA6\x88\xD5\x94\xB1\xE5\x9D\xA5\x94\x79\xDA\xB4\xC9\xCD\x93\x8E\xE5\xB0\xA6\x66\x9F\xAC\x96\xD0\xC7\x9D\xD5\xC2\xA2\xD2\x76\x62\x7F\xA8\xD8\x9A\xDE\xD9\xDD\xD9\xDA\xAA\x63\x82\x9F\x8C\xD8\x87\xA5\xD4\xDB\xA0" },
	{ "batman","\x81\xca\xa1\xa1\x85\xda\x64\x73\xa2\xae\xd6\xd8\x9f\xc6\xc1\x88\x99\x5a\x6f\xd8\xb1\xe2\x97\xdd\x96\x51\x9f\x97\x9a\xe0\xce\x95\xcd\x76\x62\x7f\xa3\xc4\xad\xd9\xd6\xe2\xa9\x9c\x67\x74\xb3\xe3\xb2\xc4\x94\x64\xa0\xa2\x81" },
	{ "batman2","\x81\xCA\xA1\xA1\x85\xDA\x65\x73\xA2\xAE\xD6\xD8\x9F\xC6\xC1\x89\x99\x5A\x6F\xD8\xB1\xE2\x97\xDD\x97\x51\x9F\x97\x9A\xE0\xCE\x95\xCD\x77\x62\x7F\xA3\xC4\xAD\xD9\xD6\xE2\xAA\x9C\x67\x74\xB3\xE3\xB2\xC4\x94\x65\xA0\xA2\x81" },//enemy within
	{ "wag101","\x96\xCA\x99\xA0\x85\xCF\x98\x8A\xE4\xDB\xE2\xCD\xA6\x96\x83\x88\xC0\x8B\x99\xE3\x9E\xD8\x9B\xB6\xD7\x90\xDC\xBE\xAD\x9D\x91\x65\xB6\xA6\x9E\xBB\xC2\xC6\x9E\xB3\xE7\xE3\xE5\xD5\xAB\x63\x82\xA0\x9C\xC4\x92\x9F\xD1\xD5\xA4" },
	{ "wag102","\x96\xCA\x99\xA0\x85\xCF\x98\x8A\xE4\xDB\xE2\xCD\xA6\x96\x83\x89\xC0\x8B\x99\xE3\x9E\xD8\x9B\xB6\xD7\x90\xDC\xBE\xAD\x9D\x91\x66\xB6\xA6\x9E\xBB\xC2\xC6\x9E\xB3\xE7\xE3\xE5\xD5\xAB\x63\x82\xA1\x9C\xC4\x92\x9F\xD1\xD5\xA4" },
	{ "wag103","\x96\xCA\x99\xA0\x85\xCF\x98\x8A\xE4\xDB\xE2\xCD\xA6\x96\x83\x8A\xC0\x8B\x99\xE3\x9E\xD8\x9B\xB6\xD7\x90\xDC\xBE\xAD\x9D\x91\x67\xB6\xA6\x9E\xBB\xC2\xC6\x9E\xB3\xE7\xE3\xE5\xD5\xAB\x63\x82\xA2\x9C\xC4\x92\x9F\xD1\xD5\xA4" },
	{ "wag104","\x96\xCA\x99\xA0\x85\xCF\x98\x8A\xE4\xDB\xE2\xCD\xA6\x96\x83\x8B\xC0\x8B\x99\xE3\x9E\xD8\x9B\xB6\xD7\x90\xDC\xBE\xAD\x9D\x91\x68\xB6\xA6\x9E\xBB\xC2\xC6\x9E\xB3\xE7\xE3\xE5\xD5\xAB\x63\x82\xA3\x9C\xC4\x92\x9F\xD1\xD5\xA4" },
	{ "texasholdem","" },//No key needed
	{ "boneville","\x82\xa3\x89\x88\x89\xd8\x9f\xb7\xd3\xd8\xda\xc0\x82\xd7\xc2\xc1\xce\x8d\xa1\xea\x99\xb7\xa5\xdd\xca\x52\xe5\x87\x69\xc8\xa4\x6e\xbb\x99\x97\xbb\xcd\xd7\x9a\xd8\xda\xd0\xc8\xde\xa6\x9c\xb7\xd2\xb9\xd6\x82\x75\xdf\xe0\xa4" },
	{ "cowrace","\x81\xD8\x9B\x99\x56\xE2\x65\x73\xB4\xDB\xE3\xC9\x64\xDB\x85\x87\xAB\x99\x9B\xDC\x6F\xEB\x68\x9F\xA7\x90\xDD\xBA\x6B\xE2\x93\x64\xA1\xB4\xA0\xB4\x93\xD9\x6B\x9C\xB7\xE3\xE6\xD1\x69\xA8\x84\x9F\x87\xD2\x94\x98\xA2\xE8\x71" },
	{ "csi3dimensions","" },//No key needed
	{ "sammax101","\x92\xCA\x9A\x81\x85\xE4\x64\x73\xA3\xBF\xD6\xD1\x7F\xC6\xCB\x88\x99\x5B\x80\xD8\xAA\xC2\x97\xE7\x96\x51\xA0\xA8\x9A\xD9\xAE\x95\xD7\x76\x62\x80\xB4\xC4\xA6\xB9\xD6\xEC\xA9\x9C\x68\x85\xB3\xDC\x92\xC4\x9E\x64\xA0\xA3\x92" },
	{ "sammax102","\x92\xCA\x9A\x81\x85\xE4\x64\x73\xA4\xBF\xD6\xD1\x7F\xC6\xCB\x88\x99\x01\x80\xD8\xAA\xC2\x97\xE7\x96\x51\xA1\xA8\x9A\xD9\xAE\x95\xD7\x76\x62\x81\xB4\xC4\xA6\xB9\xD6\xEC\xA9\x9C\x69\x85\xB3\xDC\x92\xC4\x9E\x64\xA0\xA4\x92" },
	{ "sammax103","\x92\xca\x9a\x81\x85\xe4\x64\x73\xa5\xbf\xd6\xd1\x7f\xc6\xcb\x88\x99\x5d\x80\xd8\xaa\xc2\x97\xe7\x96\x51\xa2\xa8\x9a\xd9\xae\x95\xd7\x76\x62\x82\xb4\xc4\xa6\xb9\xd6\xec\xa9\x9c\x6a\x85\xb3\xdc\x92\xc4\x9e\x64\xa0\xa5\x92" },
	{ "sammax104","\x92\xCA\x9A\x81\x85\xE4\x64\x73\xA6\xBF\xD6\xD1\x7F\xC6\xCB\x88\x99\x5E\x80\xD8\xAA\xC2\x97\xE7\x96\x51\xA3\xA8\x9A\xD9\xAE\x95\xD7\x76\x62\x83\xB4\xC4\xA6\xB9\xD6\xEC\xA9\x9C\x6B\x85\xB3\xDC\x92\xC4\x9E\x64\xA0\xA6\x92" },
	{ "sammax105","\x92\xCA\x9A\x81\x85\xE4\x64\x73\xA7\xBF\xD6\xD1\x7F\xC6\xCB\x88\x99\x5F\x80\xD8\xAA\xC2\x97\xE7\x96\x51\xA4\xA8\x9A\xD9\xAE\x95\xD7\x76\x62\x84\xB4\xC4\xA6\xB9\xD6\xEC\xA9\x9C\x6C\x85\xB3\xDC\x92\xC4\x9E\x64\xA0\xA7\x92" },
	{ "sammax106","\x92\xCA\x9A\x81\x85\xE4\x64\x73\xA8\xBF\xD6\xD1\x7F\xC6\xCB\x88\x99\x60\x80\xD8\xAA\xC2\x97\xE7\x96\x51\xA5\xA8\x9A\xD9\xAE\x95\xD7\x76\x62\x85\xB4\xC4\xA6\xB9\xD6\xEC\xA9\x9C\x6D\x85\xB3\xDC\x92\xC4\x9E\x64\xA0\xA8\x92" },
	{ "sammax201","\x92\xca\x9a\x81\x85\xe4\x65\x73\xa3\xbf\xd6\xd1\x7f\xc6\xcb\x89\x99\x5b\x80\xd8\xaa\xc2\x97\xe7\x97\x51\xa0\xa8\x9a\xd9\xae\x95\xd7\x77\x62\x80\xb4\xc4\xa6\xb9\xd6\xec\xaa\x9c\x68\x85\xb3\xdc\x92\xc4\x9e\x65\xa0\xa3\x92" },
	{ "sammax202","\x92\xCA\x9A\x81\x85\xE4\x65\x73\xA4\xBF\xD6\xD1\x7F\xC6\xCB\x89\x99\x01\x80\xD8\xAA\xC2\x97\xE7\x97\x51\xA1\xA8\x9A\xD9\xAE\x95\xD7\x77\x62\x81\xB4\xC4\xA6\xB9\xD6\xEC\xAA\x9C\x69\x85\xB3\xDC\x92\xC4\x9E\x65\xA0\xA4\x92" },
	{ "sammax203","\x92\xCA\x9A\x81\x85\xE4\x65\x73\xA5\xBF\xD6\xD1\x7F\xC6\xCB\x89\x99\x5D\x80\xD8\xAA\xC2\x97\xE7\x97\x51\xA2\xA8\x9A\xD9\xAE\x95\xD7\x77\x62\x82\xB4\xC4\xA6\xB9\xD6\xEC\xAA\x9C\x6A\x85\xB3\xDC\x92\xC4\x9E\x65\xA0\xA5\x92" },
	{ "sammax204","\x92\xCA\x9A\x81\x85\xE4\x65\x73\xA6\xBF\xD6\xD1\x7F\xC6\xCB\x89\x99\x5E\x80\xD8\xAA\xC2\x97\xE7\x97\x51\xA3\xA8\x9A\xD9\xAE\x95\xD7\x77\x62\x83\xB4\xC4\xA6\xB9\xD6\xEC\xAA\x9C\x6B\x85\xB3\xDC\x92\xC4\x9E\x65\xA0\xA6\x92" },
	{ "sammax205","\x92\xca\x9a\x81\x85\xe4\x65\x73\xa7\xbf\xd6\xd1\x7f\xc6\xcb\x89\x99\x5f\x80\xd8\xaa\xc2\x97\xe7\x97\x51\xa4\xa8\x9a\xd9\xae\x95\xd7\x77\x62\x84\xb4\xc4\xa6\xb9\xd6\xec\xaa\x9c\x6c\x85\xb3\xdc\x92\xc4\x9e\x65\xa0\xa7\x92" },
	{ "sammax301","\x92\xCA\x9A\x81\x85\xE4\x66\x73\xA3\xBF\xD6\xD1\x7F\xC6\xCB\x8A\x99\x5B\x80\xD8\xAA\xC2\x97\xE7\x98\x51\xA0\xA8\x9A\xD9\xAE\x95\xD7\x78\x62\x80\xB4\xC4\xA6\xB9\xD6\xEC\xAB\x9C\x68\x85\xB3\xDC\x92\xC4\x9E\x66\xA0\xA3\x92" },
	{ "sammax302","\x92\xCA\x9A\x81\x85\xE4\x66\x73\xA4\xBF\xD6\xD1\x7F\xC6\xCB\x8A\x99\x01\x80\xD8\xAA\xC2\x97\xE7\x98\x51\xA1\xA8\x9A\xD9\xAE\x95\xD7\x78\x62\x81\xB4\xC4\xA6\xB9\xD6\xEC\xAB\x9C\x69\x85\xB3\xDC\x92\xC4\x9E\x66\xA0\xA4\x92" },
	{ "sammax303","\x92\xCA\x9A\x81\x85\xE4\x66\x73\xA5\xBF\xD6\xD1\x7F\xC6\xCB\x8A\x99\x5D\x80\xD8\xAA\xC2\x97\xE7\x98\x51\xA2\xA8\x9A\xD9\xAE\x95\xD7\x78\x62\x82\xB4\xC4\xA6\xB9\xD6\xEC\xAB\x9C\x6A\x85\xB3\xDC\x92\xC4\x9E\x66\xA0\xA5\x92" },
	{ "sammax304","\x92\xCA\x9A\x81\x85\xE4\x66\x73\xA6\xBF\xD6\xD1\x7F\xC6\xCB\x8A\x99\x5E\x80\xD8\xAA\xC2\x97\xE7\x98\x51\xA3\xA8\x9A\xD9\xAE\x95\xD7\x78\x62\x83\xB4\xC4\xA6\xB9\xD6\xEC\xAB\x9C\x6B\x85\xB3\xDC\x92\xC4\x9E\x66\xA0\xA6\x92" },
	{ "sammax305","\x92\xCA\x9A\x81\x85\xE4\x66\x73\xA7\xBF\xD6\xD1\x7F\xC6\xCB\x8A\x99\x5F\x80\xD8\xAA\xC2\x97\xE7\x98\x51\xA4\xA8\x9A\xD9\xAE\x95\xD7\x78\x62\x84\xB4\xC4\xA6\xB9\xD6\xEC\xAB\x9C\x6C\x85\xB3\xDC\x92\xC4\x9E\x66\xA0\xA7\x92" },
	{ "fables","\x85\xca\x8f\xa0\x89\xdf\x64\x73\xa2\xb2\xd6\xc6\x9e\xca\xc6\x88\x99\x5a\x73\xd8\x9f\xe1\x9b\xe2\x96\x51\x9f\x9b\x9a\xce\xcd\x99\xd2\x76\x62\x7f\xa7\xc4\x9b\xd8\xda\xe7\xa9\x9c\x67\x78\xb3\xd1\xb1\xc8\x99\x64\xa0\xa2\x85" },//wolf among us
	{ "bttf101","\x81\xCA\x90\x9F\x78\xDB\x87\xAB\xD7\xB2\xEA\xD8\xA7\xD7\xB8\x88\x99\x5B\x6F\xD8\xA0\xE0\x8A\xDE\xB9\x89\xD4\x9B\xAE\xE0\xD6\xA6\xC4\x76\x62\x80\xA3\xC4\x9C\xD7\xC9\xE3\xCC\xD4\x9C\x78\xC7\xE3\xBA\xD5\x8B\x64\xA0\xA3\x81" },
	{ "bttf102","\x81\xca\x90\x9f\x78\xdb\x87\xab\xd7\xb2\xea\xd8\xa7\xd7\xb8\x88\x99\x01\x6f\xd8\xa0\xe0\x8a\xde\xb9\x89\xd4\x9b\xae\xe0\xd6\xa6\xc4\x76\x62\x81\xa3\xc4\x9c\xd7\xc9\xe3\xcc\xd4\x9c\x78\xc7\xe3\xba\xd5\x8b\x64\xa0\xa4\x81" },
	{ "bttf103","\x81\xCA\x90\x9F\x78\xDB\x87\xAB\xD7\xB2\xEA\xD8\xA7\xD7\xB8\x88\x99\x5D\x6F\xD8\xA0\xE0\x8A\xDE\xB9\x89\xD4\x9B\xAE\xE0\xD6\xA6\xC4\x76\x62\x82\xA3\xC4\x9C\xD7\xC9\xE3\xCC\xD4\x9C\x78\xC7\xE3\xBA\xD5\x8B\x64\xA0\xA5\x81" },
	{ "bttf104","\x81\xCA\x90\x9F\x78\xDB\x87\xAB\xD7\xB2\xEA\xD8\xA7\xD7\xB8\x88\x99\x5E\x6F\xD8\xA0\xE0\x8A\xDE\xB9\x89\xD4\x9B\xAE\xE0\xD6\xA6\xC4\x76\x62\x83\xA3\xC4\x9C\xD7\xC9\xE3\xCC\xD4\x9C\x78\xC7\xE3\xBA\xD5\x8B\x64\xA0\xA6\x81" },
	{ "bttf105","\x81\xCA\x90\x9F\x78\xDB\x87\xAB\xD7\xB2\xEA\xD8\xA7\xD7\xB8\x88\x99\x5F\x6F\xD8\xA0\xE0\x8A\xDE\xB9\x89\xD4\x9B\xAE\xE0\xD6\xA6\xC4\x76\x62\x84\xA3\xC4\x9C\xD7\xC9\xE3\xCC\xD4\x9C\x78\xC7\xE3\xBA\xD5\x8B\x64\xA0\xA7\x81" },
	{ "csideadly","\x82\xBC\x76\x69\x54\x9C\x86\x90\xD7\xDA\xEA\xA7\x85\xAE\x88\x87\x99\x7D\x7A\xDC\xAB\xEA\x79\xC2\xAE\x56\x9F\x85\x8C\xB9\xC6\xA2\xD4\x88\x85\x98\x96\x93\x69\xBF\xC2\xD9\xE6\xE1\x7A\x85\x9B\xA4\x75\x93\x79\x80\xD5\xE0\xB4" },
	{ "csifatal","\x82\xBC\x76\x6A\x54\x9C\x76\x96\xBB\xA2\xA5\x94\x75\xB8\x9C\x8D\x99\x5A\x70\xCA\x86\xAB\x66\x9F\xA8\x74\xB8\x8B\x69\x9C\xA4\x87\xA8\x7B\x62\x7F\xA4\xB6\x82\xA2\xA5\xA4\xBB\xBF\x80\x68\x82\x9F\x88\xB6\x6F\x69\xA0\xA2\x82" },
	{ "csihard","\x82\xbc\x76\x68\x67\xbf\x7c\x77\xb5\xbf\xbe\x98\x75\xb8\x9c\x8b\xac\x7d\x76\xab\x80\xc8\x7f\xa3\xa8\x74\xb8\x89\x7c\xbf\xaa\x68\xa2\x98\x7b\x83\xa4\xb6\x82\xa0\xb8\xc7\xc1\xa0\x7a\x85\x9b\xa3\x88\xb6\x6f\x67\xb3\xc5\x88" },
	{ "jurassicpark","\x89\xde\x9f\x95\x97\xdf\x9c\xa6\xc2\xcd\xe7\xcf\x63\x95\x83\xa1\xde\x9c\x8e\xea\xb0\xde\x99\xbf\xc6\x93\xda\x86\x69\x9c\xab\xa9\xd1\xa6\xa5\xc2\xca\xc6\x89\xcd\xe7\xdf\xa9\x9c\x67\x7c\xc7\xe1\xa6\xd6\x99\x9c\xd3\xc2\xa0" },
	{ "lawandorder","\x8B\xCA\xA4\x75\x92\xD0\x82\xB5\xD6\xD1\xE7\x95\x62\x95\x9F\xB8\xE0\x6B\x9B\xDB\x8C\xE7\x9A\xD4\xD7\x52\x9F\x85\x85\xCD\xD8\x75\xCD\xA9\x81\xC1\xC5\xC8\xAB\x9D\xA5\xA4\xC4\xCD\xAE\x73\xC0\xD3\x94\xD5\x8A\x98\xE2\xA3\x6F" },
	{ "mcsm","\x8c\xd2\x9b\x99\x87\xde\x94\xa9\xe6\x9d\xa5\x94\x7f\xce\xc1\xbc\xcc\x9c\x8e\xdd\xb1\xa6\x66\x9f\xb2\x8a\xdd\xba\x9c\xde\xc2\x9a\xd3\x76\x62\x7f\xae\xcc\xa7\xd1\xd8\xe6\xd9\xd2\xab\x63\x82\x9f\x92\xcc\x94\x98\xd3\xe4\xa0" },
	{ "mc2","\x8c\xd2\x9b\x99\x87\xde\x94\xa9\xe6\x9e\xa5\x94\x7f\xce\xc1\xbc\xcc\x9c\x8e\xdd\xb1\xa7\x66\x9f\xb2\x8a\xdd\xba\x9c\xde\xc2\x9a\xd3\x77\x62\x7f\xae\xcc\xa7\xd1\xd8\xe6\xd9\xd2\xab\x64\x82\x9f\x92\xcc\x94\x98\xd3\xe4\xa0" },// mcsm - season 2
	{ "celebritypoker","\x82\xCE\x99\x99\x86\xDE\x9C\xB7\xEB\xBC\xE4\xCF\x97\xD7\x96\xBC\xD5\x8F\x8F\xE9\xA6\xE9\xAF\xBF\xD4\x8C\xD4\xC7\x7C\xD1\xCD\x99\xC1\xB7\x9B\xC3\xDA\xB3\xA8\xD7\xDA\xE6\xBB\xD1\xA3\x97\xB4\xE1\xAE\xD7\x9F\x83\xDF\xDD\xA4" },//Poker Night at the inv
	{ "celebritypoker2","\x82\xCE\x99\x99\x86\xDE\x9C\xB7\xEB\xBC\xE4\xCF\x97\xD7\x85\x9A\xCE\x96\x92\xD9\xAF\xDE\xAA\xE8\xB5\x90\xDA\xBA\xAB\x9E\xA4\x99\xCB\xAA\x94\xC1\xCA\xD7\xB2\xBC\xE4\xDF\xDD\xDE\x69\x75\xB7\xDB\xAA\xC5\x98\x9C\xE4\xEB\x8F" },//Poker Night 2
	{ "grickle101","\x86\xDB\x96\x97\x8F\xD8\x98\x74\xA2\x9D\xBC\xD6\x9B\xC8\xBE\xC3\xCE\x5B\x5D\xA8\x84\xE7\x9F\xD2\xD0\x8D\xD4\x86\x69\x9D\xA8\xA6\xC8\xA8\x9D\xBB\xC6\x94\x69\x9D\xBC\xE6\xE1\xCF\xA2\x9E\xB7\xA0\x75\x94\x6D\xA5\xD9\xD5\xAA" },//puzzle agent 1 (scoggins)
	{ "grickle102","\x86\xDB\x96\x97\x8F\xD8\x98\x74\xA2\x9E\xBC\xD6\x9B\xC8\xBE\xC3\xCE\x5B\x5D\xA9\x84\xE7\x9F\xD2\xD0\x8D\xD4\x86\x69\x9E\xA8\xA6\xC8\xA8\x9D\xBB\xC6\x94\x69\x9E\xBC\xE6\xE1\xCF\xA2\x9E\xB7\xA0\x75\x95\x6D\xA5\xD9\xD5\xAA" },//Puzzle agent 2
	{ "sbcg4ap101","\x87\xD8\x9A\x99\x97\xE0\x94\xB5\xA3\x9C\xA6\xAC\xA1\xD2\xB8\xCA\xDD\x8B\x9F\xA8\x6D\xA6\x7E\xDE\xD2\x86\xE2\xC9\x9A\xDE\x92\x64\x90\x8D\xA1\xBC\xC6\xD6\xAD\xCD\xE7\xA5\xA8\x9D\x7F\xA1\xBF\xD4\xB8\xD7\x87\xA5\xA1\xA2\x70" },//strong bad 101
	{ "sbcg4ap102","\x87\xd8\x9a\x99\x97\xe0\x94\xb5\xa3\x9c\xa7\xac\xa1\xd2\xb8\xca\xdd\x8b\x9f\xa8\x6d\xa7\x7e\xde\xd2\x86\xe2\xc9\x9a\xde\x92\x64\x91\x8d\xa1\xbc\xc6\xd6\xad\xcd\xe7\xa5\xa8\x9e\x7f\xa1\xbf\xd4\xb8\xd7\x87\xa5\xa1\xa2\x71" },
	{ "sbcg4ap103","\x87\xD8\x9A\x99\x97\xE0\x94\xB5\xA3\x9C\xA8\xAC\xA1\xD2\xB8\xCA\xDD\x8B\x9F\xA8\x6D\xA8\x7E\xDE\xD2\x86\xE2\xC9\x9A\xDE\x92\x64\x92\x8D\xA1\xBC\xC6\xD6\xAD\xCD\xE7\xA5\xA8\x9F\x7F\xA1\xBF\xD4\xB8\xD7\x87\xA5\xA1\xA2\x72" },
	{ "sbcg4ap104","\x87\xd8\x9a\x99\x97\xe0\x94\xb5\xa3\x9c\xa9\xac\xa1\xd2\xb8\xca\xdd\x8b\x9f\xa8\x6d\xa9\x7e\xde\xd2\x86\xe2\xc9\x9a\xde\x92\x64\x93\x8d\xa1\xbc\xc6\xd6\xad\xcd\xe7\xa5\xa8\xa0\x7f\xa1\xbf\xd4\xb8\xd7\x87\xa5\xa1\xa2\x73" },
	{ "sbcg4ap105","\x87\xd8\x9a\x99\x97\xe0\x94\xb5\xa3\x9c\xaa\xac\xa1\xd2\xb8\xca\xdd\x8b\x9f\xa8\x6d\xaa\x7e\xde\xd2\x86\xe2\xc9\x9a\xde\x92\x64\x94\x8d\xa1\xbc\xc6\xd6\xad\xcd\xe7\xa5\xa8\xa1\x7f\xa1\xbf\xd4\xb8\xd7\x87\xa5\xa1\xa2\x74" },
	{ "borderlands","\x81\xD8\x9F\x98\x89\xDE\x9F\xA4\xE0\xD0\xE8\x95\x62\x95\x95\xC6\xDB\x8E\x92\xE9\xA9\xD6\xA4\xD3\xD8\x52\x9F\x85\x7B\xDB\xD3\x98\xC4\xB7\x9E\xB0\xCF\xC7\xAC\x9D\xA5\xA4\xBA\xDB\xA9\x96\xB7\xE1\xB1\xC4\x94\x97\xE3\xA3\x6F" },
	{ "monkeyisland101","\x8C\xD8\x9B\x9F\x89\xE5\x7C\xB6\xDE\xCD\xE3\xC8\x63\x95\x84\xA4\xD8\x98\x98\xDC\xB6\xBE\xA9\xDB\xC6\x8F\xD3\x86\x69\x9D\xAE\xA3\xCD\xB0\x97\xC8\xAA\xD6\xA5\xCD\xE3\xD8\xA9\x9C\x68\x7F\xC1\xDD\xB0\xC8\x9F\x7C\xE3\xDE\xA0" },//note for me: edit ttarchive source if id is changed
	{ "monkeyisland102","\x8C\xD8\x9B\x9F\x89\xE5\x7C\xB6\xDE\xCD\xE3\xC8\x63\x95\x85\xA4\xD8\x98\x98\xDC\xB6\xBE\xA9\xDB\xC6\x8F\xD3\x86\x69\x9E\xAE\xA3\xCD\xB0\x97\xC8\xAA\xD6\xA5\xCD\xE3\xD8\xA9\x9C\x69\x7F\xC1\xDD\xB0\xC8\x9F\x7C\xE3\xDE\xA0" },
	{ "monkeyisland103","\x8C\xD8\x9B\x9F\x89\xE5\x7C\xB6\xDE\xCD\xE3\xC8\x63\x95\x86\xA4\xD8\x98\x98\xDC\xB6\xBE\xA9\xDB\xC6\x8F\xD3\x86\x69\x9F\xAE\xA3\xCD\xB0\x97\xC8\xAA\xD6\xA5\xCD\xE3\xD8\xA9\x9C\x6A\x7F\xC1\xDD\xB0\xC8\x9F\x7C\xE3\xDE\xA0" },
	{ "monkeyisland104","\x8c\xd8\x9b\x9f\x89\xe5\x7c\xb6\xde\xcd\xe3\xc8\x63\x95\x87\xa4\xd8\x98\x98\xdc\xb6\xbe\xa9\xdb\xc6\x8f\xd3\x86\x69\xa0\xae\xa3\xcd\xb0\x97\xc8\xaa\xd6\xa5\xcd\xe3\xd8\xa9\x9c\x6b\x7f\xc1\xdd\xb0\xc8\x9f\x7c\xe3\xde\xa0" },
	{ "monkeyisland105","\x8c\xd8\x9b\x9f\x89\xe5\x7c\xb6\xde\xcd\xe3\xc8\x63\x95\x88\xa4\xd8\x98\x98\xdc\xb6\xbe\xa9\xdb\xc6\x8f\xd3\x86\x69\xa1\xae\xa3\xcd\xb0\x97\xc8\xaa\xd6\xa5\xcd\xe3\xd8\xa9\x9c\x6c\x7f\xc1\xdd\xb0\xc8\x9f\x7c\xe3\xde\xa0" },
	{ "wdc","\x96\xCA\x99\x9F\x8D\xDA\x9A\x87\xD7\xCD\xD9\xBB\x93\xD1\xBE\xC0\xD7\x91\x71\xDC\x9E\xD9\x8D\xD0\xD1\x8C\xD8\xC3\xA0\xB0\xC6\x95\xC3\x9C\x93\xBB\xCC\xCC\xA7\xD3\xB9\xD9\xD9\xD0\x8E\x93\xBE\xDA\xAE\xD1\x8D\x77\xD5\xD3\xA3" },//Walking Dead Collection / Definitive
	{ "wd3","\x96\xca\x99\x9f\x8d\xda\x9a\x87\xd7\xcd\xd9\x97\x62\x95\xaa\xb8\xd5\x95\x96\xe5\xa4\xb9\x9b\xd0\xc9\x54\x9f\x85\x90\xcd\xcd\x9f\xc8\xb3\x99\x93\xc6\xc4\x9d\x9f\xa5\xa4\xcf\xcd\xa3\x9d\xbb\xdd\xac\xa7\x8b\x94\xd4\xa5\x6f" },//Walking Dead - A New Frontier
	{ "wd2","\x96\xCA\x99\x9F\x8D\xDA\x9A\x87\xD7\xCD\xD9\x96\x62\x95\xAA\xB8\xD5\x95\x96\xE5\xA4\xB9\x9B\xD0\xC9\x53\x9F\x85\x90\xCD\xCD\x9F\xC8\xB3\x99\x93\xC6\xC4\x9D\x9E\xA5\xA4\xCF\xCD\xA3\x9D\xBB\xDD\xAC\xA7\x8B\x94\xD4\xA4\x6F" },//walking dead season 2
};

constexpr endian LITTLE_ENDIAN = 0x01;
constexpr endian BIG_ENDIAN =  0x02;

INTDEF METASTREAMEDFILE_OPEN_OK = 0x00;//Returned when a meta streamed file (file with a meta stream header MSV5/etc) opens successfully
INTDEF METASTREAMEDFILE_BAD_FORMAT = 0x01;//There is a format error with the file. You should report this on the github page.
INTDEF METASTREAMEDFILE_CRC_UNIMPL = 0x02;//Telltale use CRCs in newer games, and if the CRC is not found in the library CRC database then report this to me too!
INTDEF METASTREAMEDFILE_BAD_ARGS = 0x03;//Arguments passed to the open function are NULL or not valid
INTDEF METASTREAMEDFILE_VERS_LOADED = 0x04;//Returned when a .vers is already loaded

/*Instead of encryption for some old games, telltale bit flipped the data in some wierd chunk sizes and encrypted the meta header bytes. These are its headers*/
INTDEF HEADER_FORMATTED_A = 0xFB4A1764;
INTDEF HEADER_FORMATTED_B = 0xEB794091;
INTDEF HEADER_FORMATTED_C = 0x64AFDEFB;
INTDEF HEADER_FORMATTED_D = 0x64AFDEAA;

INTDEF HEADER_MSV5 = 0x4D535635; /*MSV5 : Meta Stream Version 5 - .ttarch2*/
INTDEF HEADER_MSV6 = 0x4D535636; /*MSV6 : Meta Stream Version 6 - .ttarch2*/
INTDEF HEADER_MTRE = 0x4D545245; /*MTRE : Meta ? Reference Encrypted? - .ttarch v3 - v9*/
INTDEF HEADER_MBIN = 0x4D42494E; /*MBIN : Meta Binary - .ttarch v0, v1, v2 */
INTDEF HEADER_MBES = 0x4D424553; /*MBES : Meta Binary Encrypted Stream - similar to header formatted*/

INTDEF HEADER_LUA_ENCRYPTED 	  = 0x6E454C1B; /*\x1BLEn ~ \x1BLua = Lua Encrypted*/
INTDEF HEADER_LUA_ENCRYPTED_OUT = 0x6F454C1B;/*\x1BLEo ~ \x1BLua = Lua Out (Resource Desc)*/
INTDEF HEADER_LUA_COMPILED	  = 0x61754C1B;/*\x1BLua*/

INTDEF HEADER_TTARCHIVE_V2 = 0x54544132; /*TTA2 : Telltale Archive v2 - unreleased*/
INTDEF HEADER_TTARCHIVE_V3 = 0x54544133; /*TTA3 : Telltale Archive v3*/
INTDEF HEADER_TTARCHIVE_V4 = 0x54544134; /*TTA4 : Telltale Archive v4*/

INTDEF HEADER_TTARCHIVE_DEF = 0x5454434E; /*TTNC : Telltale Not Compressed*/
INTDEF HEADER_TTARCHIVE_C_E = 0x54544345; /*TTCE : Telltale Compressed & Encrypted*/
INTDEF HEADER_TTARCHIVE_C_Z = 0x5454435A; /*TTCZ : Telltale Compressed*/
INTDEF HEADER_TTARCHIVE_C_e = 0x54544365; /*TTCe : Telltale Compressed & Encrypted : Specific algo (oodle)*/
INTDEF HEADER_TTARCHIVE_C_z = 0x5454437A; /*TTCz : Telltale Compressed : Specific algo (oodle)*/

//The following flags ORable flags which get returned by get game flags. Old TT tool is for games before MC:SM where they remade the engine and a lot of the files need format changes internally
//The rest of the flags are the TTARCH_FLUSH_Vx flags, which are the best supported version of the archive if you are creating an archive for it and you need to know the version for the game
INTDEF GAMEFLAG_OLD_TT_TOOL = 0b1;
INTDEF GAMEFLAG_IS_TTARCH2 = 0b10;
INTDEF GAMEFLAG_IS_TTARCH = 0b100;


const uint64 crc_tab[] = {
		0x0000000000000000L,
		0x42F0E1EBA9EA3693L, 0x85E1C3D753D46D26L, 0xC711223CFA3E5BB5L,
		0x493366450E42ECDFL, 0x0BC387AEA7A8DA4CL, 0xCCD2A5925D9681F9L,
		0x8E224479F47CB76AL, 0x9266CC8A1C85D9BEL, 0xD0962D61B56FEF2DL,
		0x17870F5D4F51B498L, 0x5577EEB6E6BB820BL, 0xDB55AACF12C73561L,
		0x99A54B24BB2D03F2L, 0x5EB4691841135847L, 0x1C4488F3E8F96ED4L,
		0x663D78FF90E185EFL, 0x24CD9914390BB37CL, 0xE3DCBB28C335E8C9L,
		0xA12C5AC36ADFDE5AL, 0x2F0E1EBA9EA36930L, 0x6DFEFF5137495FA3L,
		0xAAEFDD6DCD770416L, 0xE81F3C86649D3285L, 0xF45BB4758C645C51L,
		0xB6AB559E258E6AC2L, 0x71BA77A2DFB03177L, 0x334A9649765A07E4L,
		0xBD68D2308226B08EL, 0xFF9833DB2BCC861DL, 0x388911E7D1F2DDA8L,
		0x7A79F00C7818EB3BL, 0xCC7AF1FF21C30BDEL, 0x8E8A101488293D4DL,
		0x499B3228721766F8L, 0x0B6BD3C3DBFD506BL, 0x854997BA2F81E701L,
		0xC7B97651866BD192L, 0x00A8546D7C558A27L, 0x4258B586D5BFBCB4L,
		0x5E1C3D753D46D260L, 0x1CECDC9E94ACE4F3L, 0xDBFDFEA26E92BF46L,
		0x990D1F49C77889D5L, 0x172F5B3033043EBFL, 0x55DFBADB9AEE082CL,
		0x92CE98E760D05399L, 0xD03E790CC93A650AL, 0xAA478900B1228E31L,
		0xE8B768EB18C8B8A2L, 0x2FA64AD7E2F6E317L, 0x6D56AB3C4B1CD584L,
		0xE374EF45BF6062EEL, 0xA1840EAE168A547DL, 0x66952C92ECB40FC8L,
		0x2465CD79455E395BL, 0x3821458AADA7578FL, 0x7AD1A461044D611CL,
		0xBDC0865DFE733AA9L, 0xFF3067B657990C3AL, 0x711223CFA3E5BB50L,
		0x33E2C2240A0F8DC3L, 0xF4F3E018F031D676L, 0xB60301F359DBE0E5L,
		0xDA050215EA6C212FL, 0x98F5E3FE438617BCL, 0x5FE4C1C2B9B84C09L,
		0x1D14202910527A9AL, 0x93366450E42ECDF0L, 0xD1C685BB4DC4FB63L,
		0x16D7A787B7FAA0D6L, 0x5427466C1E109645L, 0x4863CE9FF6E9F891L,
		0x0A932F745F03CE02L, 0xCD820D48A53D95B7L, 0x8F72ECA30CD7A324L,
		0x0150A8DAF8AB144EL, 0x43A04931514122DDL, 0x84B16B0DAB7F7968L,
		0xC6418AE602954FFBL, 0xBC387AEA7A8DA4C0L, 0xFEC89B01D3679253L,
		0x39D9B93D2959C9E6L, 0x7B2958D680B3FF75L, 0xF50B1CAF74CF481FL,
		0xB7FBFD44DD257E8CL, 0x70EADF78271B2539L, 0x321A3E938EF113AAL,
		0x2E5EB66066087D7EL, 0x6CAE578BCFE24BEDL, 0xABBF75B735DC1058L,
		0xE94F945C9C3626CBL, 0x676DD025684A91A1L, 0x259D31CEC1A0A732L,
		0xE28C13F23B9EFC87L, 0xA07CF2199274CA14L, 0x167FF3EACBAF2AF1L,
		0x548F120162451C62L, 0x939E303D987B47D7L, 0xD16ED1D631917144L,
		0x5F4C95AFC5EDC62EL, 0x1DBC74446C07F0BDL, 0xDAAD56789639AB08L,
		0x985DB7933FD39D9BL, 0x84193F60D72AF34FL, 0xC6E9DE8B7EC0C5DCL,
		0x01F8FCB784FE9E69L, 0x43081D5C2D14A8FAL, 0xCD2A5925D9681F90L,
		0x8FDAB8CE70822903L, 0x48CB9AF28ABC72B6L, 0x0A3B7B1923564425L,
		0x70428B155B4EAF1EL, 0x32B26AFEF2A4998DL, 0xF5A348C2089AC238L,
		0xB753A929A170F4ABL, 0x3971ED50550C43C1L, 0x7B810CBBFCE67552L,
		0xBC902E8706D82EE7L, 0xFE60CF6CAF321874L, 0xE224479F47CB76A0L,
		0xA0D4A674EE214033L, 0x67C58448141F1B86L, 0x253565A3BDF52D15L,
		0xAB1721DA49899A7FL, 0xE9E7C031E063ACECL, 0x2EF6E20D1A5DF759L,
		0x6C0603E6B3B7C1CAL, 0xF6FAE5C07D3274CDL, 0xB40A042BD4D8425EL,
		0x731B26172EE619EBL, 0x31EBC7FC870C2F78L, 0xBFC9838573709812L,
		0xFD39626EDA9AAE81L, 0x3A28405220A4F534L, 0x78D8A1B9894EC3A7L,
		0x649C294A61B7AD73L, 0x266CC8A1C85D9BE0L, 0xE17DEA9D3263C055L,
		0xA38D0B769B89F6C6L, 0x2DAF4F0F6FF541ACL, 0x6F5FAEE4C61F773FL,
		0xA84E8CD83C212C8AL, 0xEABE6D3395CB1A19L, 0x90C79D3FEDD3F122L,
		0xD2377CD44439C7B1L, 0x15265EE8BE079C04L, 0x57D6BF0317EDAA97L,
		0xD9F4FB7AE3911DFDL, 0x9B041A914A7B2B6EL, 0x5C1538ADB04570DBL,
		0x1EE5D94619AF4648L, 0x02A151B5F156289CL, 0x4051B05E58BC1E0FL,
		0x87409262A28245BAL, 0xC5B073890B687329L, 0x4B9237F0FF14C443L,
		0x0962D61B56FEF2D0L, 0xCE73F427ACC0A965L, 0x8C8315CC052A9FF6L,
		0x3A80143F5CF17F13L, 0x7870F5D4F51B4980L, 0xBF61D7E80F251235L,
		0xFD913603A6CF24A6L, 0x73B3727A52B393CCL, 0x31439391FB59A55FL,
		0xF652B1AD0167FEEAL, 0xB4A25046A88DC879L, 0xA8E6D8B54074A6ADL,
		0xEA16395EE99E903EL, 0x2D071B6213A0CB8BL, 0x6FF7FA89BA4AFD18L,
		0xE1D5BEF04E364A72L, 0xA3255F1BE7DC7CE1L, 0x64347D271DE22754L,
		0x26C49CCCB40811C7L, 0x5CBD6CC0CC10FAFCL, 0x1E4D8D2B65FACC6FL,
		0xD95CAF179FC497DAL, 0x9BAC4EFC362EA149L, 0x158E0A85C2521623L,
		0x577EEB6E6BB820B0L, 0x906FC95291867B05L, 0xD29F28B9386C4D96L,
		0xCEDBA04AD0952342L, 0x8C2B41A1797F15D1L, 0x4B3A639D83414E64L,
		0x09CA82762AAB78F7L, 0x87E8C60FDED7CF9DL, 0xC51827E4773DF90EL,
		0x020905D88D03A2BBL, 0x40F9E43324E99428L, 0x2CFFE7D5975E55E2L,
		0x6E0F063E3EB46371L, 0xA91E2402C48A38C4L, 0xEBEEC5E96D600E57L,
		0x65CC8190991CB93DL, 0x273C607B30F68FAEL, 0xE02D4247CAC8D41BL,
		0xA2DDA3AC6322E288L, 0xBE992B5F8BDB8C5CL, 0xFC69CAB42231BACFL,
		0x3B78E888D80FE17AL, 0x7988096371E5D7E9L, 0xF7AA4D1A85996083L,
		0xB55AACF12C735610L, 0x724B8ECDD64D0DA5L, 0x30BB6F267FA73B36L,
		0x4AC29F2A07BFD00DL, 0x08327EC1AE55E69EL, 0xCF235CFD546BBD2BL,
		0x8DD3BD16FD818BB8L, 0x03F1F96F09FD3CD2L, 0x41011884A0170A41L,
		0x86103AB85A2951F4L, 0xC4E0DB53F3C36767L, 0xD8A453A01B3A09B3L,
		0x9A54B24BB2D03F20L, 0x5D45907748EE6495L, 0x1FB5719CE1045206L,
		0x919735E51578E56CL, 0xD367D40EBC92D3FFL, 0x1476F63246AC884AL,
		0x568617D9EF46BED9L, 0xE085162AB69D5E3CL, 0xA275F7C11F7768AFL,
		0x6564D5FDE549331AL, 0x279434164CA30589L, 0xA9B6706FB8DFB2E3L,
		0xEB46918411358470L, 0x2C57B3B8EB0BDFC5L, 0x6EA7525342E1E956L,
		0x72E3DAA0AA188782L, 0x30133B4B03F2B111L, 0xF7021977F9CCEAA4L,
		0xB5F2F89C5026DC37L, 0x3BD0BCE5A45A6B5DL, 0x79205D0E0DB05DCEL,
		0xBE317F32F78E067BL, 0xFCC19ED95E6430E8L, 0x86B86ED5267CDBD3L,
		0xC4488F3E8F96ED40L, 0x0359AD0275A8B6F5L, 0x41A94CE9DC428066L,
		0xCF8B0890283E370CL, 0x8D7BE97B81D4019FL, 0x4A6ACB477BEA5A2AL,
		0x089A2AACD2006CB9L, 0x14DEA25F3AF9026DL, 0x562E43B4931334FEL,
		0x913F6188692D6F4BL, 0xD3CF8063C0C759D8L, 0x5DEDC41A34BBEEB2L,
		0x1F1D25F19D51D821L, 0xD80C07CD676F8394L, 0x9AFCE626CE85B507L
};

_LIBTT_EXPORT const char* LibTelltale_Version();
_LIBTT_EXPORT void LibTelltale_MapLib(char* lib, char* path);
_LIBTT_EXPORT void LibTelltale_ClearMappedLibs();
_LIBTT_EXPORT unsigned char* LibTelltale_GetKey(const char* id);
_LIBTT_EXPORT int LibTelltale_GetGameFlags(const char* id);

HMODULE load_lib(const char* lib1, const char* def1);

bool valid_str(uint8* buf,int len);

int z_decompress(uint8 * dest, uint32 * destLen, uint8 * source, uint32 * sourceLen, int window);

uint8* z_compress(uint32* destLen, uint8* source, uint32 sourceLen, int window);

uint64 crc(char* str);

uint64 crcbuf(uint8* buf, uint32 size);

uint64 crcbuf(uint8* buf, uint32 size, uint64 curr_crc);

uint64 crctt(char* str);

uint64 pad(uint64 number, uint64 pad);

